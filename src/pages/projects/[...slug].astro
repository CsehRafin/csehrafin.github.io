---
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";
import { marked } from "marked";

// --- Generate static paths from remote JSON ---
export async function getStaticPaths() {
  try {
    const response = await fetch("https://projects.csehrafin.workers.dev/projects.json", {
      headers: {
        'Accept': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const projects = await response.json();

    if (!Array.isArray(projects) || projects.length === 0) {
      console.warn("No projects found, returning empty array");
      return [];
    }

    return projects.map((project) => ({
      params: { slug: project.slug },
      props: { project },
    }));
  } catch (error) {
    console.error("Failed to fetch projects:", error);
    // Return empty array to allow build to continue
    return [];
  }
}

// Get the project data passed from getStaticPaths
const { project } = Astro.props;

// --- Fetch markdown content ---
const mdUrl = `https://projects.csehrafin.workers.dev/${project.slug}/index.md`;
const mdResponse = await fetch(mdUrl);

if (!mdResponse.ok) {
  throw new Error(`Failed to fetch markdown for slug: ${project.slug}`);
}

const markdown = await mdResponse.text();

// --- Extract frontmatter ---
const frontmatterMatch = markdown.match(/^---\s*\n([\s\S]*?)\n---\s*\n/);
let frontmatter = {};
let content = markdown;

if (frontmatterMatch) {
  const yamlText = frontmatterMatch[1];
  
  // Parse YAML frontmatter
  frontmatter = Object.fromEntries(
    yamlText
      .split("\n")
      .filter(line => line.trim() && line.includes(":"))
      .map((line) => {
        const [key, ...rest] = line.split(":");
        return [key.trim(), rest.join(":").trim().replace(/^["']|["']$/g, "")];
      })
  );
  
  // Remove frontmatter from content
  content = markdown.slice(frontmatterMatch[0].length).trim();
}

// --- Convert markdown to HTML ---
const htmlContent = marked(content);

// --- Calculate reading time ---
const readTime = readingTime(content);

// --- Use frontmatter or fallback to project data ---
const title = frontmatter.title || project.title;
const dateString = frontmatter.date || project.date;
const date = new Date(dateString); // âœ… Convert to Date object
---

<PageLayout title={title} description={frontmatter.description}>
  <Container>
    <div class="animate">
      <BackToPrev href="/projects">Back to projects</BackToPrev>
    </div>
    <div class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readTime}
        </div>
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {title}
      </h1>
    </div>
    <article class="animate prose dark:prose-invert">
      <Fragment set:html={htmlContent} />
    </article>
  </Container>
</PageLayout>